<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
						http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.1.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
						http://www.springframework.org/schema/task   
                        http://www.springframework.org/schema/task/spring-task-4.1.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
						">
	<!-- 引入资源文件 -->

	<!--  加密故此方法不采用-->
		<!--<context:property-placeholder location="classpath:system.properties" />-->
	 <bean id="propertyConfig" class="en.common.frame.filter.PropertyPlaceholderConfigurerMine">
	   <property name="locations">
	      <list>
                <value>classpath:system.properties</value>
           </list>
	   </property>
	     <property name="fileEncoding" value="utf-8"/>
	</bean>
	  <context:component-scan base-package="en.**.service.impl,en.**.dao.impl"/>
	
	<!-- 配置bonecp数据源 -->
	   
	    <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource">
		<property name="driverClass">
			<value>${datasource.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<!-- <value>jdbc:sqlserver://localhost:7873;DatabaseName=en</value> -->
			<value>${datasource.url}</value> 
		</property>
		<property name="username">
			<value>${datasource.userName}</value>
		</property>
		<property name="password">
			<value>${datasource.password}</value>
		</property>
	<!-- 	 分区数 ，默认值2，最小1，推荐3-4，视应用而定  -->
		 <property name="partitionCount">
			<value>${datasource.partitionCount}</value>
		</property>
		<!-- 每个分区最大的连接数    -->
		 <property name="maxConnectionsPerPartition">
			<value>${datasource.maxConnectionsPerPartition}</value>
		</property>
		<!--每个分区最小的连接数  -->
		<property name="minConnectionsPerPartition">
			<value>${datasource.minConnectionsPerPartition}</value>
		</property>
		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0  -->
		<property name="idleConnectionTestPeriod">
			<value>${datasource.idleConnectionTestPeriod}</value>
		</property>
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0  -->
		 <property name="idleMaxAge">
			<value>${datasource.idleMaxAge}</value>
		</property>
		<!--每次去拿数据库连接的时候一次性要拿几个,默认值：2  -->
		<property name="acquireIncrement">
			<value>${datasource.acquireIncrement}</value>
		</property>
		<!-- 缓存prepared statements的大小，默认值：0  -->
		 <property name="statementsCacheSize">
			<value>${datasource.statementsCacheSize}</value>
		</property>
		<!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能  -->
		 <property name="releaseHelperThreads">
			<value>${datasource.releaseHelperThreads}</value>
		</property>
	</bean> 
	<!-- 配置sessionfactory -->
	 <bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="en.**.entity" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">
					${hibernate.hbm2ddl}
				</prop>
				<prop key="hibernate.show_sql">
					${hibernate.show_sql}
				</prop>
				<prop key="hibernate.cache.use_second_level_cache">
					${hibernate.use_second_level_cache}
				</prop>
				<prop key="hibernate.cache.use_query_cache">
					${hibernate.use_query_cache}
				</prop>
				<prop key="hibernate.cache.region.factory_class">
					${hibernate.factory_class}
				</prop>
				<prop key="net.sf.ehcache.configurationResourceName">
					ehcache.xml
				</prop>
			</props>
		</property>
	</bean>  
	<!--  配置事务管理器-->
	 <bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	 <tx:advice id="transactionInterceptor" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED"  rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="audit*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="undoAudit*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="find*" propagation="REQUIRED"/>
			<tx:method name="get*" propagation="REQUIRED" />
			<!--<tx:method name="*" propagation="REQUIRED" read-only="true" />-->
		</tx:attributes>
	</tx:advice> 
	 <aop:config>
		<aop:pointcut expression="execution(* en..service.*.*(..))"
			id="mypointcut" />
		<aop:advisor advice-ref="transactionInterceptor"
			pointcut-ref="mypointcut" />
	</aop:config>  
	<!--   系统定时器
   <bean id="task" class="straw.common.service.impl.SysTiming"/>
    <task:annotation-driven/>
    <task:scheduled-tasks>
       <task:scheduled ref="task" method="executeTimming" cron="${datasource.tasktime}"/>
    </task:scheduled-tasks> -->
   <!-- shiro驻入 start -->
          <!--  配置 shrio cache  --> 
     <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
           <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
     </bean> 
 <!--     继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java  --> 
      <bean id="loginUserService" class="en.basis.service.impl.LoginUserServiceImpl" autowire="byName" />
      <bean id="myRealm" class="en.common.frame.shiro.SecurityRealm">
         <property name="loginUserService" ref="loginUserService"/>
      </bean> 
 <!--     这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替   --> 
      <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
        <property name="cacheManager" ref="shiroCacheManager"/>
    </bean> 
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持  --> 
     <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">   
    <!-- Shiro的核心安全接口,这个属性是必须的  --> 
         <property name="securityManager" ref="securityManager"/>
       <!--要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面  --> 
         <property name="loginUrl" value="/"/> 
       <!--认证未通过访问的页面-->  
         <property name="unauthorizedUrl" value="/unauthorized"/>
      <!--Shiro连接约束配置,即过滤链的定义,如采用shiro注解则无需此处    -->
         <property name="filterChainDefinitions">  
            <value>  
                /login=anon  
                /logout=authc
                /unauthorized=anon
                /main/getappinfo=authc
                /main/changepwd=authc
                /sys/menumgr=authc,perms[menu:add]
                /sys/menu/menutreedata=authc,perms[menu:add]
                /sys/menu/saveaddmenu=authc,perms[menu:add]
                /sys/menu/delmenu=authc,perms[menu:del]
                /sys/menu/loaddata=authc,perms[menu:search]
                /sys/menu/updatemenu=authc,perms[menu:update]
                /sys/role=authc,perms[role:add]
                /sys/role/update=authc,perms[role:update]
                /sys/role/loaddata=authc,perms[role:search]
                /sys/role/remove=authc,perms[role:del]
                /sys/role/getrolemenus=authc,perms[role:update]
                /sys/role/updateroleforwin=authc,perms[role:update]
                /sys/dd=authc,perms[dd:add]
                /sys/dd/update=authc,perms[dd:update]
                /sys/dd/loaddata=authc,perms[dd:search]
                /sys/xtcs=authc,perms[xtcs:add]
                /sys/xtcs/update=authc,perms[xtcs:update]
                /sys/stcs/loaddata=authc,perms[xtcs:search]
                /basis/company=authc,perms[company:add]
                /basis/company/companytreedata=authc,perms[company:search]
                /basis/company/update=authc,perms[company:update]
                /basis/company/loaddata=authc,perms[company:search]
                /basis/hr=authc,perms[hr:add]
                /basis/hr/updatewin=authc,perms[hr:update]
                /basis/hr/loaddata=authc,perms[hr:search]
                /basis/hr/update=authc,perms[hr:update]
                /basis/hr/getHRInfo=authc,perms[hr:search]
                /basis/luser=authc,perms[luser:add]
                /basis/luser/getuser=authc,perms[luser:search]
                /basis/luser/update=authc,perms[luser:update]
                /basis/luser/loaddata=authc,perms[luser:search]
                /basis/luser/updaterole=authc,perms[luser:update]
                /basis/luser/getindependentrole=authc,perms[luser:search]
                /basis/luser/updateindependentrole=authc,perms[hr:add]
                </value>  
        </property> 
    </bean> 
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行   -->
     <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- shiro注入 end-->
</beans>